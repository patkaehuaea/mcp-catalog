name: Spec Workflow
description: |
  A Model Context Protocol (MCP) server designed for defining, validating, and executing spec-driven workflows. It provides a stable specification language for workflows, validation tooling, simulation, and an execution environment. Use Spec Workflow to author machine-readable specs, verify them against schemas, run dry-run simulations, and trigger orchestrated actions from language-model prompts.

  ## Features
  - **Structured Development Workflow**: Sequential spec creation (Requirements → Design → Tasks)
  - **Real-Time Web Dashboard**: Monitor specs, tasks, and progress with live updates
  - **VSCode Integration**: Integrated sidebar dashboard for VSCode users
  - **Approval Workflow**: Complete approval process with revisions and feedback
  - **Task Progress Tracking**: Visual progress bars and detailed status monitoring
  - **Multi-Language Support**: Available in 11 languages including English, Japanese, Chinese, Spanish, Portuguese, German, French, Russian, Italian, Korean, and Arabic

  ## What you'll need to connect

  **Project Directory**: Spec Workflow requires a project directory path where it will create and manage specs, approvals, and workflow files.

  **Optional Configuration**:
  - Spec storage location (local files, S3, or remote HTTP endpoint)
  - Execution mode settings (local, HTTP, or cloud)
  - API keys for hosted deployments

  ## Example Usage

  Ask your AI assistant to:

  - **Create Development Specs** - "Create a spec for user authentication system"
  - **Track Progress** - "List my specs and show their current status"
  - **Execute Tasks** - "Execute task 1.2 in the user-auth spec"
  - **Approval Workflow** - "Request approval for the authentication design spec"
  - **Dashboard Access** - "Show me the spec workflow dashboard"

metadata:
  categories: Developer Tools
  tags:
    - workflow
    - spec
    - automation
    - project-management
icon: https://github.com/Pimzino.png
repoURL: https://github.com/Pimzino/spec-workflow-mcp

env:
  - key: PROJECT_PATH
    name: Project Directory Path
    required: true
    sensitive: false
    description: "Absolute path to the project directory where specs and workflow files will be managed"
  - key: SPEC_STORAGE
    name: Spec Storage Location
    required: false
    sensitive: false
    description: "URL or path where specs are persisted. Examples: s3://bucket/specs, file:///data/specs, or a remote HTTP endpoint. Default: local project directory"
  - key: SWF_EXECUTION_MODE
    name: Execution Mode
    required: false
    sensitive: false
    description: "Default execution adapter: local, http, or cloud. Default: local"
  - key: SWF_API_KEY
    name: API Key
    required: false
    sensitive: true
    description: "API key used to authenticate requests with a hosted Spec Workflow MCP instance"
  - key: AUTO_START_DASHBOARD
    name: Auto Start Dashboard
    required: false
    sensitive: false
    description: "Set to 'true' to automatically start the web dashboard on server startup"

toolPreview:
  - name: create_spec
    description: Create a new spec in the project workflow
  - name: list_specs
    description: List all specs and their current status
  - name: get_spec_details
    description: Get detailed information about a specific spec
  - name: update_spec_status
    description: Update the status or progress of a spec
  - name: execute_task
    description: Execute a specific task within a spec
  - name: request_approval
    description: Submit a spec or task for approval
  - name: provide_feedback
    description: Provide feedback on specs or tasks
  - name: open_dashboard
    description: Open the web-based dashboard interface

runtime: npx
npxConfig:
  package: "@pimzino/spec-workflow-mcp@latest"
  args:
  - "${PROJECT_PATH}"

